[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Goiko-DevOps\n\n\n\n\n\nObjetivos: Aprender lo básico sobre Git, programación y Linux.\n\n\n\nAprender los comandos básicos: clone, branch, merge, pull requests.\nUtilizar plataformas Git como GitHub o GitLab para gestionar proyectos.\nRecursos:\n\nPro Git Book\nLearn Git by Atlassian\n\n\n\n\n\n\nConsolidar el lenguaje de JAVA.\nEstudiar conceptos básicos como la sintaxis, estructuras de control (if/else, loops), funciones, etc.\n\n\n\n\n\nFamiliarizarme con Ubuntu y la línea de comandos (CLI).\nAprender Bash o PowerShell para automatizar tareas.\nRecursos:\n\nBash Reference Manual\nUltimate Guide: Getting Started With Ubuntu\n\n\n\n\n\n\n\nConfigurar un repositorio Git (en GitHub o GitLab) para una aplicación sencilla escrita en Python.\nDesarrollar un script en Bash para automatizar la creación de un entorno en un servidor Ubuntu, incluyendo la configuración de la aplicación, instalación de dependencias, configuración de un servidor web (Nginx o Apache) y despliegue automático con un solo comando.\nUtilizar Git para versionar todo el proceso.\n\n\n\n\n\n\nObjetivos: Fundamentos de redes, seguridad y administración de servidores.\n\n\n\nEstudiar el Modelo OSI, TCP/IP, DNS, direcciones IP y puertos.\nConfigurar firewalls y aprender seguridad básica en redes.\nRecursos:\n\nOSI Model Explained\nSecuring DevOps\n\n\n\n\n\n\nAprender sobre proxies, servidores web como Nginx y Apache.\nEstudiar conceptos de caching, balanceo de carga y firewall.\nRecursos:\n\nNGINX Handbook\nLearn Apache Server\n\n\n\n\n\n\n\nImplementar un servidor web en Ubuntu, configurar Nginx para alojar la aplicación, y crear un balanceador de carga entre varias instancias en contenedores Docker.\nUtilizar firewall y políticas de seguridad para limitar el acceso, además de configurar un sistema de logging (como ELK Stack) para monitorear tráfico y errores.\n\n\n\n\n\n\nObjetivos: Aprender sobre contenedores y Docker.\n\n\n\nEmpezar con Docker para crear imágenes y contenedores.\nUtilizar Docker Compose para orquestar múltiples contenedores.\nRecursos:\n\nDocker Mastery: with Kubernetes + Swarm\nLearning Containers from the Bottom Up\n\n\n\n\n\n\n\nDesarrollar una aplicación sencilla en Java o Python y empaquetarla en un contenedor Docker.\nConfigurar Docker Compose para que la aplicación interactúe con una base de datos (MySql,PostgreSQL).\nAutomatizar todo el proceso usando Bash y Docker CLI.\n\n\n\n\n\n\nObjetivos: Dominar Kubernetes para orquestar contenedores.\n\n\n\nInstalar y administrar Kubernetes.\nAprender sobre clústeres, servicios y despliegue de aplicaciones.\nRecursos:\n\nKubernetes Crash Course for Beginners\nCertified Kubernetes Administrator (CKA)\n\n\n\n\n\n\n\nDesplegar la aplicación creada en contenedores Docker dentro de un clúster de Kubernetes.\nConfigurar un Deployment para administrar el ciclo de vida de la aplicación y un Service para exponerla.\nConfigurar un Ingress para gestionar el tráfico externo y habilitar un sistema de autoescalado con HPA (Horizontal Pod Autoscaler).\n\n\n\n\n\n\nObjetivos: Aprender a automatizar la infraestructura y los pipelines de CI/CD.\n\n\n\nAprender Terraform para provisión de infraestructura.\nEstudiar la configuración y automatización de servidores.\nRecursos:\n\nOfficial Terraform Tutorials\nAutomate Terraform documentation\n\n\n\n\n\n\nConfigurar pipelines de integración y entrega continua.\nUtilizar herramientas como Jenkins, GitLab CI/CD y GitHub Actions.\nRecursos:\n\nJenkins, From Zero To Hero\nLearn GitLab CI/CD\n\n\n\n\n\n\nDesarrollar un pipeline CI/CD que integre los siguientes pasos:\n\nConstrucción del contenedor Docker con la aplicación.\nEjecución de pruebas automáticas (unitarias).\nDespliegue automático en un clúster de Kubernetes.\nConfigurar Terraform para crear la infraestructura necesaria en la nube (por ejemplo, AWS o Azure) y para aprovisionar los recursos en Kubernetes.\n\n\n\n\n\n\nObjetivos: Configurar y gestionar el monitoreo de aplicaciones y servicios.\n\n\n\nAprender Prometheus y Grafana para monitoreo de sistemas.\nConfigurar alertas y paneles de monitoreo para las aplicaciones.\nRecursos:\n\nLearn Prometheus\nLearn Grafana\n\n\n\n\n\n\n\nConfigurar un sistema de monitoreo completo utilizando Prometheus y Grafana para monitorear el clúster de Kubernetes y la aplicación.\nCrear paneles personalizados en Grafana para mostrar métricas de los pods de Kubernetes y configurar alertas para eventos críticos.\n\n\n\n\n\n\nObjetivos: Aprender a gestionar la infraestructura en la nube y aplicar buenas prácticas de software.\n\n\n\nAprender sobre AWS, Azure o Google Cloud.\nGestionar recursos, usuarios, redes y seguridad en la nube.\nRecursos:\n\nUltimate AWS Certified Cloud Practitioner\nMicrosoft Azure Fundamentals\n\n\n\n\n\n\nEstudiar el ciclo de vida del desarrollo de software (SDLC) y Scrum.\nAprender sobre la automatización de pruebas y buenas prácticas en desarrollo de software.\nRecursos:\n\nWhat is Scrum?\nSoftware Development Life Cycle (SDLC)\n\n\n\n\n\n\n\nDesplegar la infraestructura en la nube (AWS, Azure o Google Cloud) utilizando Terraform.\nConfigurar una aplicación en la nube (contenedores Docker o máquinas virtuales) y un pipeline CI/CD que se ejecute al hacer un push al repositorio.\nIntegrar monitoreo y alertas dentro de la infraestructura en la nube.\n\n\n\n\n\nDesplegar una app Java en Kubernetes con un entorno básico.\nConfigurar monitorización con Prometheus y Grafana para la app.\nPublicar todo en GitHub con documentación detallada (Markdown/Ghpages).\n\n\n\n\n\n\nObjetivo: Prepararme para aplicar a trabajos de DevOps Junior y conocer las tecnologías más demandadas.\n\n\n\nExplorar plataformas como LinkedIn, Infojobs.\nBuscar puestos con palabras clave: DevOps, CI/CD, Docker, Kubernetes, Terraform, Jenkins, AWS, Azure, Linux.\n\n\n\n\n\nTecnologías clave: Docker, Kubernetes, Terraform, Jenkins, AWS, Azure, Prometheus, Grafana, Python, Bash.\nSeguridad en DevOps: Conocimientos básicos de seguridad en CI/CD.\n\n\n\n\n\nActualizar el CV con proyectos y herramientas dominadas.\nMantener LinkedIn actualizado para conectar con profesionales del área.\n\n\n\n\n\nPracticar habilidades técnicas y realizar ejercicios en HackerRank.\n\n\n\n\n\nEstar informado sobre nuevas tecnologías en el área.\n\n\n\n\n\n\n\n\n“El futuro es la automatización. Mi misión: hacerlo posible.” ✨"
  },
  {
    "objectID": "index.html#mes-1-diciembre-2024-fundamentos-iniciales",
    "href": "index.html#mes-1-diciembre-2024-fundamentos-iniciales",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Aprender lo básico sobre Git, programación y Linux.\n\n\n\nAprender los comandos básicos: clone, branch, merge, pull requests.\nUtilizar plataformas Git como GitHub o GitLab para gestionar proyectos.\nRecursos:\n\nPro Git Book\nLearn Git by Atlassian\n\n\n\n\n\n\nConsolidar el lenguaje de JAVA.\nEstudiar conceptos básicos como la sintaxis, estructuras de control (if/else, loops), funciones, etc.\n\n\n\n\n\nFamiliarizarme con Ubuntu y la línea de comandos (CLI).\nAprender Bash o PowerShell para automatizar tareas.\nRecursos:\n\nBash Reference Manual\nUltimate Guide: Getting Started With Ubuntu\n\n\n\n\n\n\n\nConfigurar un repositorio Git (en GitHub o GitLab) para una aplicación sencilla escrita en Python.\nDesarrollar un script en Bash para automatizar la creación de un entorno en un servidor Ubuntu, incluyendo la configuración de la aplicación, instalación de dependencias, configuración de un servidor web (Nginx o Apache) y despliegue automático con un solo comando.\nUtilizar Git para versionar todo el proceso."
  },
  {
    "objectID": "index.html#mes-2-enero-2025-redes-seguridad-y-gestión-de-servidores",
    "href": "index.html#mes-2-enero-2025-redes-seguridad-y-gestión-de-servidores",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Fundamentos de redes, seguridad y administración de servidores.\n\n\n\nEstudiar el Modelo OSI, TCP/IP, DNS, direcciones IP y puertos.\nConfigurar firewalls y aprender seguridad básica en redes.\nRecursos:\n\nOSI Model Explained\nSecuring DevOps\n\n\n\n\n\n\nAprender sobre proxies, servidores web como Nginx y Apache.\nEstudiar conceptos de caching, balanceo de carga y firewall.\nRecursos:\n\nNGINX Handbook\nLearn Apache Server\n\n\n\n\n\n\n\nImplementar un servidor web en Ubuntu, configurar Nginx para alojar la aplicación, y crear un balanceador de carga entre varias instancias en contenedores Docker.\nUtilizar firewall y políticas de seguridad para limitar el acceso, además de configurar un sistema de logging (como ELK Stack) para monitorear tráfico y errores."
  },
  {
    "objectID": "index.html#mes-3-febrero-2025-contenedores",
    "href": "index.html#mes-3-febrero-2025-contenedores",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Aprender sobre contenedores y Docker.\n\n\n\nEmpezar con Docker para crear imágenes y contenedores.\nUtilizar Docker Compose para orquestar múltiples contenedores.\nRecursos:\n\nDocker Mastery: with Kubernetes + Swarm\nLearning Containers from the Bottom Up\n\n\n\n\n\n\n\nDesarrollar una aplicación sencilla en Java o Python y empaquetarla en un contenedor Docker.\nConfigurar Docker Compose para que la aplicación interactúe con una base de datos (MySql,PostgreSQL).\nAutomatizar todo el proceso usando Bash y Docker CLI."
  },
  {
    "objectID": "index.html#mes-4-marzo-2025-orquestación-de-contenedores",
    "href": "index.html#mes-4-marzo-2025-orquestación-de-contenedores",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Dominar Kubernetes para orquestar contenedores.\n\n\n\nInstalar y administrar Kubernetes.\nAprender sobre clústeres, servicios y despliegue de aplicaciones.\nRecursos:\n\nKubernetes Crash Course for Beginners\nCertified Kubernetes Administrator (CKA)\n\n\n\n\n\n\n\nDesplegar la aplicación creada en contenedores Docker dentro de un clúster de Kubernetes.\nConfigurar un Deployment para administrar el ciclo de vida de la aplicación y un Service para exponerla.\nConfigurar un Ingress para gestionar el tráfico externo y habilitar un sistema de autoescalado con HPA (Horizontal Pod Autoscaler)."
  },
  {
    "objectID": "index.html#mes-5-abril-2025-infraestructura-como-código-iac-y-cicd",
    "href": "index.html#mes-5-abril-2025-infraestructura-como-código-iac-y-cicd",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Aprender a automatizar la infraestructura y los pipelines de CI/CD.\n\n\n\nAprender Terraform para provisión de infraestructura.\nEstudiar la configuración y automatización de servidores.\nRecursos:\n\nOfficial Terraform Tutorials\nAutomate Terraform documentation\n\n\n\n\n\n\nConfigurar pipelines de integración y entrega continua.\nUtilizar herramientas como Jenkins, GitLab CI/CD y GitHub Actions.\nRecursos:\n\nJenkins, From Zero To Hero\nLearn GitLab CI/CD\n\n\n\n\n\n\nDesarrollar un pipeline CI/CD que integre los siguientes pasos:\n\nConstrucción del contenedor Docker con la aplicación.\nEjecución de pruebas automáticas (unitarias).\nDespliegue automático en un clúster de Kubernetes.\nConfigurar Terraform para crear la infraestructura necesaria en la nube (por ejemplo, AWS o Azure) y para aprovisionar los recursos en Kubernetes."
  },
  {
    "objectID": "index.html#mes-6-mayo-2025-monitoreo-y-observabilidad",
    "href": "index.html#mes-6-mayo-2025-monitoreo-y-observabilidad",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Configurar y gestionar el monitoreo de aplicaciones y servicios.\n\n\n\nAprender Prometheus y Grafana para monitoreo de sistemas.\nConfigurar alertas y paneles de monitoreo para las aplicaciones.\nRecursos:\n\nLearn Prometheus\nLearn Grafana\n\n\n\n\n\n\n\nConfigurar un sistema de monitoreo completo utilizando Prometheus y Grafana para monitorear el clúster de Kubernetes y la aplicación.\nCrear paneles personalizados en Grafana para mostrar métricas de los pods de Kubernetes y configurar alertas para eventos críticos."
  },
  {
    "objectID": "index.html#mes-7-junio-2025-cloud-y-prácticas-de-ingeniería-de-software",
    "href": "index.html#mes-7-junio-2025-cloud-y-prácticas-de-ingeniería-de-software",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivos: Aprender a gestionar la infraestructura en la nube y aplicar buenas prácticas de software.\n\n\n\nAprender sobre AWS, Azure o Google Cloud.\nGestionar recursos, usuarios, redes y seguridad en la nube.\nRecursos:\n\nUltimate AWS Certified Cloud Practitioner\nMicrosoft Azure Fundamentals\n\n\n\n\n\n\nEstudiar el ciclo de vida del desarrollo de software (SDLC) y Scrum.\nAprender sobre la automatización de pruebas y buenas prácticas en desarrollo de software.\nRecursos:\n\nWhat is Scrum?\nSoftware Development Life Cycle (SDLC)\n\n\n\n\n\n\n\nDesplegar la infraestructura en la nube (AWS, Azure o Google Cloud) utilizando Terraform.\nConfigurar una aplicación en la nube (contenedores Docker o máquinas virtuales) y un pipeline CI/CD que se ejecute al hacer un push al repositorio.\nIntegrar monitoreo y alertas dentro de la infraestructura en la nube.\n\n\n\n\n\nDesplegar una app Java en Kubernetes con un entorno básico.\nConfigurar monitorización con Prometheus y Grafana para la app.\nPublicar todo en GitHub con documentación detallada (Markdown/Ghpages)."
  },
  {
    "objectID": "index.html#mes-8-julio-2025-búsqueda-de-empleo-y-análisis-del-mercado",
    "href": "index.html#mes-8-julio-2025-búsqueda-de-empleo-y-análisis-del-mercado",
    "title": "Road-Map para convertirme en DevOps Junior",
    "section": "",
    "text": "Objetivo: Prepararme para aplicar a trabajos de DevOps Junior y conocer las tecnologías más demandadas.\n\n\n\nExplorar plataformas como LinkedIn, Infojobs.\nBuscar puestos con palabras clave: DevOps, CI/CD, Docker, Kubernetes, Terraform, Jenkins, AWS, Azure, Linux.\n\n\n\n\n\nTecnologías clave: Docker, Kubernetes, Terraform, Jenkins, AWS, Azure, Prometheus, Grafana, Python, Bash.\nSeguridad en DevOps: Conocimientos básicos de seguridad en CI/CD.\n\n\n\n\n\nActualizar el CV con proyectos y herramientas dominadas.\nMantener LinkedIn actualizado para conectar con profesionales del área.\n\n\n\n\n\nPracticar habilidades técnicas y realizar ejercicios en HackerRank.\n\n\n\n\n\nEstar informado sobre nuevas tecnologías en el área.\n\n\n\n\n\n\n\n\n“El futuro es la automatización. Mi misión: hacerlo posible.” ✨"
  },
  {
    "objectID": "arqui.html",
    "href": "arqui.html",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Camino Ninja Cloud Arquitect\n\n\n\n\n\n\nDominar los conceptos y herramientas básicas de DevOps.\n\n\n\n\nCI/CD:\n\nImplementación básica con herramientas como Jenkins, GitHub Actions o GitLab CI.\n\nContenedores:\n\nGestión con Docker.\n\nInfraestructura como Código (IaC):\n\nIntroducción a Terraform y Ansible.\n\nVersion Control:\n\nUso avanzado de Git.\n\n\n\n\n\n\nDuración: 3-4 meses (10-15 horas/semana).\n\n\n\n\n\nCursos en Udemy o YouTube sobre Docker, CI/CD y Terraform.\nPrácticas en proyectos pequeños.\n\n\n\n\n\n\n\n\nAdquirir habilidades avanzadas en automatización, monitoreo y seguridad.\n\n\n\n\nOrquestación de Contenedores:\n\nUso avanzado de Kubernetes (deployment, autoescalado, Helm).\n\nMonitoreo:\n\nImplementación de Prometheus, Grafana, y ELK Stack.\n\nAutomatización:\n\nUso avanzado de Ansible, Terraform, y Pulumi.\n\nSeguridad (DevSecOps):\n\nIntegración de herramientas como Snyk, Aqua Security, y análisis estático de código.\n\n\n\n\n\n\nDuración: 4-6 meses (10-15 horas/semana).\n\n\n\n\n\nCertified Kubernetes Administrator (CKA).\nDocker Certified Associate.\n\n\n\n\n\n\n\n\nAprender a diseñar sistemas DevOps robustos, escalables y seguros.\n\n\n\n\nArquitecturas CI/CD:\n\nDiseñar pipelines complejos multi-ambiente.\n\nSistemas Distribuidos:\n\nPatrones como microservicios, event-driven, y serverless.\n\nIntegración con Cloud:\n\nGestionar servicios en AWS, Azure o GCP.\n\nAlta Disponibilidad y Tolerancia a Fallos:\n\nConfiguración de infraestructuras resilientes.\n\n\n\n\n\n\nDuración: 4-6 meses (10-15 horas/semana).\n\n\n\n\n\nAWS Certified DevOps Engineer – Professional.\nGoogle Cloud DevOps Engineer.\n\n\n\n\n\n\n\n\nConvertirte en un experto capaz de liderar y diseñar estrategias DevOps a gran escala.\n\n\n\n\nGobernanza DevOps:\n\nDiseñar estándares, guías y políticas para equipos.\n\nOptimización de Costos:\n\nOptimizar pipelines y recursos cloud.\n\nEstrategias Multi-Cloud:\n\nDiseñar soluciones portables para AWS, Azure y GCP.\n\nGestión de Equipos y Colaboración:\n\nHabilidades de liderazgo técnico para coordinar múltiples equipos.\n\n\n\n\n\n\nDuración: 6-8 meses (10-15 horas/semana).\n\n\n\n\n\nAWS Solutions Architect – Professional.\nCertified Kubernetes Architect (CKA Advanced Track).\n\n\n\n\n\n\n\n\nDemostrar tus habilidades con casos prácticos y proyectos reales.\n\n\n\n\nPipeline CI/CD Avanzado:\n\nDiseñar e implementar un pipeline CI/CD híbrido con Jenkins y GitHub Actions.\n\nSistema Resiliente en Kubernetes:\n\nImplementar un clúster Kubernetes con alta disponibilidad y monitoreo completo.\n\nPlataforma Multi-Cloud:\n\nCrear una infraestructura portable entre AWS y GCP utilizando Terraform.\n\nDevSecOps:\n\nIntegrar pruebas de seguridad automatizadas en un pipeline CI/CD.\n\n\n\n\n\n\nDuración: 2-3 meses (10-15 horas/semana).\n\n\n\n\n\n\n\nFundamentos de DevOps: 3-4 meses.\nHerramientas Avanzadas de DevOps: 4-6 meses.\nDiseño de Arquitecturas DevOps: 4-6 meses.\nEspecialización como DevOps Architect: 6-8 meses.\nProyectos y Portafolio: 2-3 meses."
  },
  {
    "objectID": "arqui.html#fundamentos-de-devops",
    "href": "arqui.html#fundamentos-de-devops",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Dominar los conceptos y herramientas básicas de DevOps.\n\n\n\n\nCI/CD:\n\nImplementación básica con herramientas como Jenkins, GitHub Actions o GitLab CI.\n\nContenedores:\n\nGestión con Docker.\n\nInfraestructura como Código (IaC):\n\nIntroducción a Terraform y Ansible.\n\nVersion Control:\n\nUso avanzado de Git.\n\n\n\n\n\n\nDuración: 3-4 meses (10-15 horas/semana).\n\n\n\n\n\nCursos en Udemy o YouTube sobre Docker, CI/CD y Terraform.\nPrácticas en proyectos pequeños."
  },
  {
    "objectID": "arqui.html#profundización-en-herramientas-devops",
    "href": "arqui.html#profundización-en-herramientas-devops",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Adquirir habilidades avanzadas en automatización, monitoreo y seguridad.\n\n\n\n\nOrquestación de Contenedores:\n\nUso avanzado de Kubernetes (deployment, autoescalado, Helm).\n\nMonitoreo:\n\nImplementación de Prometheus, Grafana, y ELK Stack.\n\nAutomatización:\n\nUso avanzado de Ansible, Terraform, y Pulumi.\n\nSeguridad (DevSecOps):\n\nIntegración de herramientas como Snyk, Aqua Security, y análisis estático de código.\n\n\n\n\n\n\nDuración: 4-6 meses (10-15 horas/semana).\n\n\n\n\n\nCertified Kubernetes Administrator (CKA).\nDocker Certified Associate."
  },
  {
    "objectID": "arqui.html#diseño-de-arquitecturas-devops",
    "href": "arqui.html#diseño-de-arquitecturas-devops",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Aprender a diseñar sistemas DevOps robustos, escalables y seguros.\n\n\n\n\nArquitecturas CI/CD:\n\nDiseñar pipelines complejos multi-ambiente.\n\nSistemas Distribuidos:\n\nPatrones como microservicios, event-driven, y serverless.\n\nIntegración con Cloud:\n\nGestionar servicios en AWS, Azure o GCP.\n\nAlta Disponibilidad y Tolerancia a Fallos:\n\nConfiguración de infraestructuras resilientes.\n\n\n\n\n\n\nDuración: 4-6 meses (10-15 horas/semana).\n\n\n\n\n\nAWS Certified DevOps Engineer – Professional.\nGoogle Cloud DevOps Engineer."
  },
  {
    "objectID": "arqui.html#especialización-como-devops-architect",
    "href": "arqui.html#especialización-como-devops-architect",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Convertirte en un experto capaz de liderar y diseñar estrategias DevOps a gran escala.\n\n\n\n\nGobernanza DevOps:\n\nDiseñar estándares, guías y políticas para equipos.\n\nOptimización de Costos:\n\nOptimizar pipelines y recursos cloud.\n\nEstrategias Multi-Cloud:\n\nDiseñar soluciones portables para AWS, Azure y GCP.\n\nGestión de Equipos y Colaboración:\n\nHabilidades de liderazgo técnico para coordinar múltiples equipos.\n\n\n\n\n\n\nDuración: 6-8 meses (10-15 horas/semana).\n\n\n\n\n\nAWS Solutions Architect – Professional.\nCertified Kubernetes Architect (CKA Advanced Track)."
  },
  {
    "objectID": "arqui.html#proyectos-y-portafolio",
    "href": "arqui.html#proyectos-y-portafolio",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Demostrar tus habilidades con casos prácticos y proyectos reales.\n\n\n\n\nPipeline CI/CD Avanzado:\n\nDiseñar e implementar un pipeline CI/CD híbrido con Jenkins y GitHub Actions.\n\nSistema Resiliente en Kubernetes:\n\nImplementar un clúster Kubernetes con alta disponibilidad y monitoreo completo.\n\nPlataforma Multi-Cloud:\n\nCrear una infraestructura portable entre AWS y GCP utilizando Terraform.\n\nDevSecOps:\n\nIntegrar pruebas de seguridad automatizadas en un pipeline CI/CD.\n\n\n\n\n\n\nDuración: 2-3 meses (10-15 horas/semana)."
  },
  {
    "objectID": "arqui.html#resumen-de-tiempos",
    "href": "arqui.html#resumen-de-tiempos",
    "title": "Road-Map Cloud Arquitect",
    "section": "",
    "text": "Fundamentos de DevOps: 3-4 meses.\nHerramientas Avanzadas de DevOps: 4-6 meses.\nDiseño de Arquitecturas DevOps: 4-6 meses.\nEspecialización como DevOps Architect: 6-8 meses.\nProyectos y Portafolio: 2-3 meses."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Información Personal\nNombre: Boris Iván\nCorreo Electrónico: dadapunk456@gmail.com ✉️\nUbicación: Barcelona, España 📍\n\n\n\nConéctame\nEstoy siempre abierto a nuevas conexiones y colaboraciones. Puedes encontrarme en mis redes sociales:\n\nLinkedIn 👔 - Para establecer contactos profesionales y compartir experiencias.\nGitHub 🐦 - Explora mis proyectos y contribuciones en código."
  }
]